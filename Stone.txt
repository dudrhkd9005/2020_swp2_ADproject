GameManager.py 파일에는 Player class와 GameManager class가 존재한다.

Player class
Player class의 멤버함수에는 Player의 멤버변수를 초기화해주는 __init__함수와 Player가 이동할때 쓰이는 move함수가 존재한다.

Player의 멤버변수는 Player의 현재 위치를 나타내는 x,y값 charactor 이미지를 해주는 charactor 변수 등이 있다. 

move()
move함수는 이후 설명할 GameMng class에서 사용된다. 매개변수로 strMove를 받고 만약 strMove가 "-"가 입력되었다면 Player가 왼쪽으로 한칸 이동하고 "+"가 입력되었다면 오른쪽으로 한칸 이동한다.

GameManager class

GameManagr class는 Rain Stone게임의 인게임 부분을 전체적으로 총괄하는 class이다. 멤버함수에는 GameManage의 멤버변수를 초기화해주는 __init__함수와 인게임이 실질적으로 돌아가는 함수인 game함수, 게임 이미지들이 렌더링되는 render함수, 플레이어가 선택한 블럭의 index값과 색깔을 확인해서 판정하는 check_blocks함수 마지막으로 스테이지마다 배치되어있는 블럭을 txt파일로 가져오기 위한 readtxt함수가 존재한다.

GameManager의 멤버변수는 sound, UI(Ingame화면, 결과화면), 인게임 이미지, txt파일로 불러온 block의 배열값 등이 있다.

game()
게임의 전체적인 흐름은 game함수에서 실행된다. game함수 내에 있는 while문을 통해 게임이 계속 업데이트된다. game함수내의 pygame.event.get()이 인자로 받아지는 for문은 게임내의 버튼과 키보드 버튼을 클릭할때 발생하는 이벤트를 처리하기위해 만들었다. 왼쪽 화살표키를 누르면 Player클래스의 move함수를 실행시키고 인자값으로 "-"를 넣어준다 플레이어가 왼쪽으로 이동하는 것을 의미한다. 오른쪽 화살표키를 누르면 Player클래스의 move함수를 실행시키고 인자값으로 "+"를 넣어준다 플레이어가 오른쪽으로 이동하는 것을 의미한다. space키를 누르면 GameManager의 check_block함수로 이동한다. 자세한 설명은 아래에서 설명하겠다. 이것들은 모두 game이 종료되지 않았을때(not self.isEndgame)만 실행된다. 반대로 게임이 종료되었다면(결과화면이 나왔을때) 결과창의 버튼 클릭이 허용되도록 만들었다. menu버튼의 위치에서 마우스 버튼을 UP시킬시 스테이지 선택화면으로 이동하고, 다시하기 버튼의 위치에서는 현제 스테이지가 다시 시작되고, next버튼의 위치에서는 다음 스테이지로 이동한다.

check_blocks()
이 함수는 위의 설명에서 말했듯이 플레이어가 선택한 블럭의 index값을 가져와 처리해주는 함수이다. 이 함수가 작동하는 방식은 readtxt함수에서 가져오는 텍스트파일로 시작된다. readtxt함수는 텍스트파일의 readlines()를 저장해 return하는데 텍스트파일의 형식은 5x14의 형태로 숫자가 저장되어있으며 숫자에는 0(비어있는상태), 1(빨강색 블럭), 2(노랑색 블럭), 3(파랑색 블럭), 4(초록색 블럭), 5(보라색 블럭), 6(회색 블럭)이 있다. 그 뒤에는 1라인씩 목표 콤버의 수, 제한 시간 이 2가지의 숫자가 txt파일에 기록되어있다. 그렇게 가져온 txt파일의 값을 check_blocks함수에서 사용하는데 check_blocks함수에서 처음 시작하는 for문은 13번째 인덱스부터 시작해서 점점 내려가게 만들어놓은 반복문이다. 그렇게 만들어놓은 이유는 Player의 위치가 블럭의[0][]번째에 위치해 있는 것이 아니라 블럭의[13][]에 위치해 있기때문이다. 이후 블럭을 판정하는 기준은 13번째 인덱스부터 시작해서 만약 블럭 인덱스[i(13부터 0까지 1씩 줄어듬)][플레이어 위치 인덱스(0인 경우 1번째칸 1인경우 2번째칸 이런식으로)]가 '0'이 아니면(비어있지 않으면) 효과음이 재생되고 블럭이 사라지면서 인게임 왼쪽에 위치해있는 블럭칸에 그 블럭이 추가된다. 또한 추가로 블럭이 깔려있는 패널(배경)과 플레이어가 가지고 있는 선(player Laser)의 색깔이 선택한 블럭의 색깔과 같아진다.

render()
이 함수는 위의 설명과 같이 게임 이미지들을 렌더링하는 기능을 가지고있는 함수이다. 플레이어 이미지를  텍스트 파일을 통해 가져온 블럭인덱스로 각 색깔의 블럭들의 Sprite들을 렌더링 해준다. 이외에도 Combo와 Time텍스트, 배경화면, 결과창을 렌더링해준다. 또한 게임이 끝났는지 진행중인지를 판단해서 렌더링이 실시간으로 바뀌는 함수이기 때문에 모든 블럭이 사라지고(블럭 인덱스가 모두 '0'인경우) 게임이 끝났으면 -> 게임클리어(self.isClear = True)가 되고 그게 아닐경우 -> 게임 실패(self.isClear = False)가 된다.
